# Hola mundo con docker
$ docker run hello-world
# Ver contenedores corriendo
$ docker ps
# Ver todos los contenedores
$ docker ps -a
# Inspecionar la config un contenedor
$ docker inspect <container_id or container_name>
# Crear un contenedor con un nombre personalizado
$ docker run --name <custom_name> <image_name>
# Renombrar un contenedor
$ docker rename --name <old_name> <new_name>
# Eliminar un contenedor
$ docker rm <container_id or container_name>
# Eliminar todos los contenedores apagados
$ docker container prune
# Eliminar TODOS los contenedores
$ docker rm -f $(docker ps -aq)

2. MODO INTERACTIVO
$ sudo  docker run -it <nombre imagen> 
-i: interactivo
-t: abre la consola

$ sudo  docker run -it ubuntu 

--->desde gitbash-->  winpty docker run -it ubuntu

#  ejecuta una imagen de ubuntu, si no está localmente la descarga
$ docker run ubuntu

# lista los contenedores detenidos y ejecución
$ docker ps -a

# ejecuta la imagen de ubuntu e ingresa a la terminal del contenedor CLI
# -i: modo interactivo
# -t: abre el TTY (consola)
$ docker run -it ubuntu
$ docker ps -a (veo todos los contenedores)
$ docker --name <nombre> -d ubuntu -f <comando>
$ docker --name alwaysup -d ubuntu tail -f /dev/null (mantiene el contenedor activo)
$ docker exec -it alwaysup bash (entro al contenedor)
$ docker inspect --format ‘{{.State.Pid}}’ alwaysup (veo el main process del ubuntu)
desde Linux si ejecuto kill -9 <PID> mata el proceso dentro del contenedor de ubuntu pero desde MAC no funciona

EXPONIENDO CONTENEDORES
$ docker run -d --name proxy nginx (corro un nginx)
$ docker stop proxy (apaga el contenedor)
$ docker rm proxy (borro el contenedor)
$ docker rm -f <contenedor> (lo para y lo borra)
$ docker run -d --name proxy -p 8080:80 nginx (corro un nginx y expongo el puerto 80 del contenedor en el puerto 8080 de mi máquina)
localhost:8080 (desde mi navegador compruebo que funcione)
$ docker logs proxy (veo los logs)
$ docker logs -f proxy (hago un follow del log)
$ docker logs --tail 10 -f proxy (veo y sigo solo las 10 últimas entradas del log)

docker run -d --name [name] -p [HostPort/8081]:[ContainerPort/80] [imagen/nginx]

docker logs --tail 10 -f proxy

****BIND MOUNTS*****
$ mkdir dockerdata (creo un directorio en mi máquina)
$ docker run -d --name db mongo
$ docker ps (veo los contenedores activos)
$ docker exec -it db bash (entro al bash del contenedor)
$ mongo (me conecto a la BBDD)

    shows dbs (listo las BBDD)
    use platzi ( creo la BBDD platzi)
    db.users.insert({“nombre”:“guido”}) (inserto un nuevo dato)
    db.users.find() (veo el dato que cargué)
    $ docker run -d --name db -v <path de mi maquina>:<path dentro del contenedor(/data/db mongo)> (corro un contenedor de mongo y creo un bind mount)

#Para quienes esten usando Win10, tuve un problema de que estaba intentando linkear la carpeta de mi local con la del contenedor y tener los datos de mongo, insertaba datos en la BD pero no se me creaban los archivos en mi pc.
#Para el PATH en windows, tuve que usar “” y para el PATH dentro del contenedor tuve que usar “/”

docker run  -d --name mongodb -v C:\Users\jaarevalo\Documents\Developer\Cursos\Docker\mongodata:/data/db mongo

#Estando en windows para no escribir toda la ruta del bind mount me pare en el directorio y ejecute este comando
---> $ docker run -d --name db -v ${pwd}:/data/db mongo

mkdir dockerdata
docker run -d --name db mongo
docker exec -it db bash
# mongo
> show dbs
> use platzi
> db.users.insert({"nombre": "Boris"})
> db.users.find()
> exit
# exit
docker rm -f db

****IMPORTANTE BINDMOUNT**** APACHE
sudo docker run -d --name db -v "/$(pwd)/mongodata":/data/db mongo
docker run -d --name db -v "/$(pwd)":/data/db mongo

**** CLASE DE VOLUMENES *****
$ docker volume ls (listo los volumes)
$ docker volume create dbdata (creo un volume)
$ docker run -d --name db --mount src=dbdata,dst=/data/db mongo (corro la BBDD y monto el volume)
$ docker run -d --name db --mount src=dbdata,dst=//data/db mongo  --->(para mi en windows 10)
$ docker inspect db (veo la información detallada del contenedor)
$ mongo (me conecto a la BBDD)
    shows dbs (listo las BBDD)
    use platzi ( creo la BBDD platzi)
    db.users.insert({“nombre”:“guido”}) (inserto un nuevo dato)
    db.users.find() (veo el dato que cargué)

** CLASE insertar y extraer archivos de un contenedor *****
$ touch prueba.txt (creo un archivo en mi máquina)
$ docker run -d --name copytest ubuntu tail -f /dev/null (corron un ubuntu y le agrego el tail para que quede activo)
$ docker run -d --name copytest ubuntu tail -f //dev/null (win 10)
$ docker exec -it copytest bash (entro al contenedor)
$ mkdir testing (creo un directorio en el contenedor)
$ docker cp prueba.txt copytest:/testing/test.txt (copio el archivo dentro del contenedor)
$ docker cp copytest:/testing localtesting (copio el directorio de un contenedor a mi máquina)
con “docker cp” no hace falta que el contenedor esté corriendo


** CLASE DE IMAGENES --> Concepto Fundamental.
Descargar imagenes

$ docker history [imagen]
$ docker image rm -f {id_image}

$ docker image ls (veo las imágenes que tengo localmente)
$ docker pull ubuntu:20.04 (bajo la imagen de ubuntu con una versión específica)
$ docker pull [imageName]  
$ docker pull [imageName]:[versionImage]

** CLASE CREAR PROPIAS IMAGENES. ********** IMPORTANTE DATAREDES.
$ mkdir imagenes (creo un directorio en mi máquina)
$ cd imagenes (entro al directorio)
$ touch Dockerfile (creo un Dockerfile)
$ code . (abro code en el direcotrio en el que estoy)

##Contenido del Dockerfile##
FROM ubuntu:latest
RUN touch /ust/src/hola-platzi.txt (comando a ejecutar en tiempo de build)
##fin##

$ docker build -t ubuntu:platzi . (creo una imagen con el contexto de build <directorio>)
$ docker run -it ubuntu:platzi (corro el contenedor con la nueva imagen)
$ docker login (me logueo en docker hub)
$ docker tag ubuntu:platzi jmantillap/ubuntu:platzy (cambio el tag para poder subirla a mi docker hub)
$ docker push jmantillap/ubuntu:platzi (publico la imagen a mi docker hub)


**** CLASE El sitemas de capas. **************
$ docker history ubuntu:platzi (veo la info de como se construyó cada capa)
$ dive ubuntu:platzi (veo la info de la imagen con el programa dive)

Para usar la herramienta hay que descargar el .exe, ponerlo en algun lado de preferencia cerca de c:/dive/dive.exe algo así y ejecutar
c:\dive\dive.exe ubuntu 

https://github.com/wagoodman/dive



**** CLASE DOCKER PARA DESARROLLAR APLICACIONES **********
$ git clone https://github.com/platzi/docker
$ docker build -t platziapp . (creo la imagen local)
$ docker image ls (listo las imagenes locales)
$ docker run --rm -p 3000:3000 platziapp (creo el contenedor y cuando se detenga se borra, lo publica el puerto 3000)
$ docker ps (veo los contenedores activos)

*** CLASE APROVECHANDO CACHE ESTRUCTURAR IMAGENES ****

$ docker build platziapp . (creo la imagen local)
$ docker run --rm -p 3000:3000 -v pathlocal/index.js:pathcontenedor/index.js platziapp (corro un contenedor y monto el archivo index.js para que se actualice dinámicamente con nodemon que está declarado en mi Dockerfile)

$ docker run --rm -p 3000:3000 -v "/$(pwd)/":/usr/src platziapp

##dockerfile
FROM node:14
COPY ["package.json", "package-lock.json", "/usr/src/"]
WORKDIR /usr/src
RUN npm install
COPY [".", "/usr/src/"]
EXPOSE 3000
CMD ["npx", "nodemon", "-L", "index.js"]  (importante el -L para windows)
##fin Dockerfile


***** CLASE DOCKER NETWORKING *************
$ docker network ls (listo las redes)
$ docker network create --attachable plazinet (creo la red)
$ docker inspect plazinet (veo toda la definición de la red creada)
$ docker run -d --name db mongo (creo el contenedor de la BBDD)
$ docker network connect plazinet db (conecto el contenedor “db” a la red “platzinet”)
$ docker run -d --name app -p 3000:3000 --env MONGO_URL=mongodb://db:27017/test platziapp (corro el contenedor “app” y le paso una variable)
$ docker network connect plazinet app (conecto el contenedor “app” a la red “plazinet”)

*** CLASE DOCKER COMPOSE ********************************
$ docker-compose up
$ docker-compose up -d
$ docker-compose down

*** CLASE SUBCOMANDOS DE DOCKER COMPOSE *********

$ docker-compose ps

$ docker network ls (listo las redes)
$ docker network inspect docker_default (veo la definición de la red)
$ docker-compose logs (veo todos los logs)
$ docker-compose logs app (solo veo el log de “app”)
$ docker-compose logs -f app (hago un follow del log de app)
$ docker-compose logs -f app db (hago un follow del log de app y db) 
$ docker-compose exec app bash (entro al shell del contenedor app)
$ docker-compose ps (veo los contenedores generados por docker compose)
$ docker-compose down (borro todo lo generado por docker compose)


***** CLASE DOCKER COMPOSE COMO HERRAMIENTA DE DESARROLLO **********
$ docker-compose build (crea las imágenes)
$ docker-compose up -d (crea los servicios/contenedores)
$ docker-compose logs app (veo los logs de “app”)
$ docker-compose logs -f app (hago un follow de los logs de “app”)

$ docker-compose build app

##Docker-compose
version: "3.8"
services:
  app:
	# crea una imagen con los ficheros del directorio actual.
    build: .
    environment:
      MONGO_URL: "mongodb://db:27017/test"
    depends_on:
      - db
    ports:
      - "3000:3000"
	# Sección para definir los bindmount.
    volumes: 
		#<local path>:<container path> # el directorio "<.>" actual   se montará en "/usr/src" en el contenedor.
      - .:/usr/src			
	  # indica que ficheros debe ignorar
      - /usr/src/node_modules
	# Permite pasarle un comando a ejecutar al servicio app.
    command: npx nodemon -L index.js
  db:
    image: mongo


*****CLASE COMPOSE EN EQUIPO *******

$ touch docker-compose.override.yml (creo el archivo override)
$ docker-compose up -d (crea los servicios/contenedores)
$ docker-compose exec app bash (entro al bash del contenedor app)
$ docker-compose ps (veo los contenedores del compose)
/*
...
ports:
	- 3000-3010:3000  # para abrir un rango de puertos
...
*/
$ docker-compose up -d --scale app=2 (escalo dos instancias de app, previamente tengo que definir un rango de puertos en el archivo compose)
$ docker-compose down (borro todo lo creado con compose)


*** CLASE ADMINISTRANDO TU AMBIENTE DOCKER *************
$ docker ps -a (veo todos los contenedores de mi máquina)
$ docker container prune (borra todos los contenedores inactivos)
$ docker rm -f $(docker ps -aq) (borra todos los contenedores que estén corriendo o apagados)
$ docker network ls (lista todas las redes)
$ docker volume ls (lista todos los volumes)
$ docker image ls (lista todas las imágenes)
$ docker system prune (borra todo lo que no se esté usando)
$ docker run -d --name app --memory 1g platziapp (limito el uso de memoria)
$ docker stats (veo cuantos recursos consume docker en mi sistema)
$ docker inspect app (puedo ver si el proceso muere por falta de recursos)

Commandos y Descripciones

$ docker stats

$ docker system df Show docker disk usage
$ docker system events Get real time events from the server
$ docker system infoDisplay system-wide information
$ docker system prune Remove unused data





































 
